
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 20 19:24:25 CEST 2018
//----------------------------------------------------

package serum;

import serum.ASTNodes.*;

/** CUP v0.11a beta 20060608 generated parser.
 * @version Wed Jun 20 19:24:25 CEST 2018
 */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public AnalizadorSintactico() {super();}

    /** Constructor which sets the default scanner. */
    public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\005\000\002\003\007\000\002\003\005" +
    "\000\002\003\003\000\002\004\007\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\006\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\006" +
    "\000\002\012\003\000\002\012\006\000\002\011\003\000" +
    "\002\011\005\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\113\000\016\004\020\005\015\006\012\010\004\011" +
    "\016\035\017\001\002\000\014\011\016\012\030\013\032" +
    "\030\034\031\033\001\002\000\024\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\035\ufff5\036\ufff5" +
    "\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\035\ufff6\036\ufff6\001\002\000\006" +
    "\014\113\033\067\001\002\000\022\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\010\ufffb\011\ufffb\035\ufffb\036\ufffb\001\002" +
    "\000\004\002\112\001\002\000\014\011\016\012\030\013" +
    "\032\030\034\031\033\001\002\000\022\002\000\004\020" +
    "\005\015\006\012\010\004\011\016\035\017\036\000\001" +
    "\002\000\006\011\023\033\024\001\002\000\006\011\ufff0" +
    "\033\ufff0\001\002\000\062\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\001\002\000\016\004\020\005\015\006\012\010" +
    "\004\011\016\035\017\001\002\000\006\011\ufff1\033\ufff1" +
    "\001\002\000\004\036\022\001\002\000\024\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\035\ufff7" +
    "\036\ufff7\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\014\027\035\ufff4\036\ufff4" +
    "\001\002\000\004\012\025\001\002\000\004\034\026\001" +
    "\002\000\006\011\uffef\033\uffef\001\002\000\014\011\016" +
    "\012\030\013\032\030\034\031\033\001\002\000\056\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\032\uffea\034\uffea" +
    "\035\uffea\036\uffea\001\002\000\060\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\032\uffec\033\067\034\uffec\035\uffec" +
    "\036\uffec\001\002\000\056\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002" +
    "\000\014\011\016\012\030\013\032\030\034\031\033\001" +
    "\002\000\014\011\016\012\030\013\032\030\034\031\033" +
    "\001\002\000\052\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\015\043\016\037\017\045\020\036" +
    "\021\040\022\047\023\041\024\046\025\044\026\050\027" +
    "\042\035\ufff3\036\ufff3\001\002\000\014\011\016\012\030" +
    "\013\032\030\034\031\033\001\002\000\014\011\016\012" +
    "\030\013\032\030\034\031\033\001\002\000\014\011\016" +
    "\012\030\013\032\030\034\031\033\001\002\000\014\011" +
    "\016\012\030\013\032\030\034\031\033\001\002\000\014" +
    "\011\016\012\030\013\032\030\034\031\033\001\002\000" +
    "\014\011\016\012\030\013\032\030\034\031\033\001\002" +
    "\000\014\011\016\012\030\013\032\030\034\031\033\001" +
    "\002\000\014\011\016\012\030\013\032\030\034\031\033" +
    "\001\002\000\014\011\016\012\030\013\032\030\034\031" +
    "\033\001\002\000\014\011\016\012\030\013\032\030\034" +
    "\031\033\001\002\000\014\011\016\012\030\013\032\030" +
    "\034\031\033\001\002\000\056\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\001" +
    "\002\000\056\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\015\043\016\037\017\045\020\036\021" +
    "\040\022\uffe9\023\uffe9\024\046\025\044\026\050\027\042" +
    "\032\uffe9\034\uffe9\035\uffe9\036\uffe9\001\002\000\056\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\015\043\016\037\017\045\020\036\021\040\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\050\027\042\032\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\001\002\000\056\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\050\027\042\032\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\001\002\000\056\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\015\043\016\037\017\045\020\036" +
    "\021\040\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\050\027" +
    "\042\032\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000\056" +
    "\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\050\027\042\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\001\002\000\056\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\050\027\uffe4\032\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\001\002\000\056\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\015\043\016\037\017\045\020" +
    "\036\021\040\022\uffe8\023\uffe8\024\046\025\044\026\050" +
    "\027\042\032\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000" +
    "\056\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\050\027\042\032\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\001\002\000\056\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\050\027\042\032\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\056\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\050\027\042\032\uffde\034\uffde\035\uffde\036\uffde\001\002" +
    "\000\056\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\015\043\016\037\017\045\020\036\021\040" +
    "\022\047\023\041\024\046\025\044\026\050\027\042\032" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\032\015\043" +
    "\016\037\017\045\020\036\021\040\022\047\023\041\024" +
    "\046\025\044\026\050\027\042\032\066\001\002\000\056" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\001\002\000\014\011\016\012\030" +
    "\013\032\030\034\031\033\001\002\000\032\015\043\016" +
    "\037\017\045\020\036\021\040\022\047\023\041\024\046" +
    "\025\044\026\050\027\042\034\071\001\002\000\062\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\001\002\000\006\002" +
    "\uffff\036\uffff\001\002\000\044\004\020\005\015\006\077" +
    "\010\076\011\016\015\043\016\037\017\045\020\036\021" +
    "\040\022\047\023\041\024\046\025\044\026\050\027\042" +
    "\035\017\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\010\ufffe\011\ufffe\035\ufffe\036\ufffe\001\002\000\004" +
    "\007\111\001\002\000\014\011\016\012\030\013\032\030" +
    "\034\031\033\001\002\000\014\011\016\012\030\013\032" +
    "\030\034\031\033\001\002\000\024\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufff8\010\ufffb\011\ufffb\035\ufffb\036\ufffb" +
    "\001\002\000\044\004\020\005\015\006\077\010\076\011" +
    "\016\015\043\016\037\017\045\020\036\021\040\022\047" +
    "\023\041\024\046\025\044\026\050\027\042\035\017\001" +
    "\002\000\004\007\103\001\002\000\016\004\020\005\015" +
    "\006\077\010\076\011\016\035\017\001\002\000\022\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\035\ufffd" +
    "\036\ufffd\001\002\000\004\007\ufffa\001\002\000\044\004" +
    "\020\005\015\006\077\010\076\011\016\015\043\016\037" +
    "\017\045\020\036\021\040\022\047\023\041\024\046\025" +
    "\044\026\050\027\042\035\017\001\002\000\022\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\010\ufffc\011\ufffc\035\ufffc\036" +
    "\ufffc\001\002\000\004\007\ufff9\001\002\000\016\004\020" +
    "\005\015\006\012\010\004\011\016\035\017\001\002\000" +
    "\004\002\001\001\002\000\014\011\016\012\030\013\032" +
    "\030\034\031\033\001\002\000\052\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\015\043\016\037" +
    "\017\045\020\036\021\040\022\047\023\041\024\046\025" +
    "\044\026\050\027\042\035\ufff2\036\ufff2\001\002\000\044" +
    "\004\020\005\015\006\012\010\004\011\016\015\043\016" +
    "\037\017\045\020\036\021\040\022\047\023\041\024\046" +
    "\025\044\026\050\027\042\035\017\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\113\000\020\002\010\003\012\005\007\006\005\007" +
    "\004\010\013\012\006\001\001\000\006\011\114\012\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\072" +
    "\012\030\001\001\000\020\002\071\003\012\005\007\006" +
    "\005\007\004\010\013\012\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\020\003" +
    "\012\005\007\006\005\007\004\010\013\012\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\034\012\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\064" +
    "\012\030\001\001\000\006\011\063\012\030\001\001\000" +
    "\002\001\001\000\006\011\062\012\030\001\001\000\006" +
    "\011\061\012\030\001\001\000\006\011\060\012\030\001" +
    "\001\000\006\011\057\012\030\001\001\000\006\011\056" +
    "\012\030\001\001\000\006\011\055\012\030\001\001\000" +
    "\006\011\054\012\030\001\001\000\006\011\053\012\030" +
    "\001\001\000\006\011\052\012\030\001\001\000\006\011" +
    "\051\012\030\001\001\000\006\011\050\012\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\067\012\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\073\004\074\005\077\006\005\007\004\010\013\012" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\105\012\030\001\001\000\006\011\100\012\030\001" +
    "\001\000\002\001\001\000\020\003\073\004\101\005\077" +
    "\006\005\007\004\010\013\012\006\001\001\000\002\001" +
    "\001\000\020\003\103\004\104\005\077\006\005\007\004" +
    "\010\013\012\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\106\004\107\005\077\006\005\007\004" +
    "\010\013\012\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\103\005\007\006\005\007\004\010\013" +
    "\012\006\001\001\000\002\001\001\000\006\011\113\012" +
    "\030\001\001\000\002\001\001\000\016\003\106\005\007" +
    "\006\005\007\004\010\013\012\006\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$AnalizadorSintactico$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}




    public static java.io.File file;

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                msg.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    msg.append(", column " + (s.right+1));
            }
        }
        msg.append(" : " +  message);
        Logger.report_error(msg.toString());
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(5);
    }

    /** Ejecuta el analizador lexico y el sintáctico.
     *  El primer argumento es la dirección relativa del fichero fuente.*/
    public static void main(String[] args){
        try {
            file = new java.io.File(args[0]);

            AnalizadorSintactico asin = new AnalizadorSintactico(
            new AnalizadorLexico(new java.io.FileReader(file)));
            //Generamos el arbol de sintaxis abstracta:
            ASTNode result = (ASTNode) asin.parse().value;

            //Fase de identificadores:
            IdTable idTable = new IdTable();
            result.identifiers(idTable);
            if (idTable.isFail())
                System.exit(2);

            //Comprobación de tipos:
            boolean typeCorrect = result.typeCheck();
            if (!typeCorrect)
                System.exit(3);

            //Generación de codigo:
            java.util.List<serum.codegen.PInstruction> code = new java.util.LinkedList();
            code.add(new serum.codegen.SetSP(idTable.getMaxRho()));
            code.addAll(result.toCode());
            code.add(new serum.codegen.Stop());

            //Numeración de instrucciones:
            int instructionPosition = 0;
            for (serum.codegen.PInstruction pinstruction : code)
                pinstruction.setPosition(instructionPosition++);

            //Mostrar código por pantalla:
            for (serum.codegen.PInstruction pinstruction : code)
                Logger.codeExit.print(pinstruction);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
    private final AnalizadorSintactico parser;

    /** Constructor */
    CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

        /* select the action based on the action number */
        switch (CUP$AnalizadorSintactico$act_num)
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // expression ::= expression GET_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression GET_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.GET_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // expression ::= expression LET_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression LET_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.LET_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // expression ::= expression GT_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression GT_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.GT_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // expression ::= expression LT_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression LT_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.LT_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // expression ::= expression EQ_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression EQ_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.EQ_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // expression ::= NOT_OP expression
            {
                Expression RESULT =null;
                int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= NOT_OP expression (row " + (nleft+1) + ")");
                RESULT = new UnaryOp(op1, OperationType.NOT_OP);
                RESULT.setRowAndCol(nleft + 1, nright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // expression ::= expression AND_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression AND_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.AND_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // expression ::= expression OR_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression OR_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.OR_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // expression ::= BOOL_LITERAL
            {
                Expression RESULT =null;
                int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                String c = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= BOOL_LITERAL (row " + (cleft+1) + ")");
                RESULT = new Constant(new Boolean(c));
                RESULT.setRowAndCol(cleft + 1, cright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // expression ::= expression DIV_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression DIV_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.DIV_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // expression ::= expression PROD_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression PROD_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.PROD_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // expression ::= expression SUBS_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression SUBS_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.SUBS_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // expression ::= expression SUM_OP expression
            {
                Expression RESULT =null;
                int op1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int op1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Expression op1 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int op2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int op2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression op2 = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= expression SUM_OP expression (row " + (op1left+1) + ")");
                RESULT = new BinaryOp(op1, op2, OperationType.SUM_OP);
                RESULT.setRowAndCol(op1left + 1, op1right + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // expression ::= INTEGER_LITERAL
            {
                Expression RESULT =null;
                int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                String c = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= INTEGER_LITERAL (row " + (cleft+1) + ")");
                RESULT = new Constant(new Integer(c));
                RESULT.setRowAndCol(cleft + 1, cright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // expression ::= LPAREN expression RPAREN
            {
                Expression RESULT =null;
                int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                Logger.log.println("expression ::= LPAREN variable RPAREN (row " + (lleft+1) + ")");
                RESULT = e;
                RESULT.setRowAndCol(lleft + 1, lright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // expression ::= variable
            {
                Expression RESULT =null;
                int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Variable v = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("expression ::= variable (row " + (vleft+1) + ")");
                RESULT = v;
                RESULT.setRowAndCol(vleft + 1, vright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // variable ::= variable LBRACKET expression RBRACKET
            {
                Variable RESULT =null;
                int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
                int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
                Variable id = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
                int idxleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int idxright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Expression idx = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                Logger.log.println("variable ::= variable LBRACKET expression RBRACKET (row " + (idleft+1) + ")");
                RESULT = new ArrayAccess(id, idx);
                RESULT.setRowAndCol(idleft + 1, idright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // variable ::= IDENTIFIER
            {
                Variable RESULT =null;
                int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("variable ::= IDENTIFIER (row " + (idleft+1) + ")");
                RESULT = new Variable(id);
                RESULT.setRowAndCol(idleft + 1, idright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // type ::= type LBRACKET INTEGER_LITERAL RBRACKET
            {
                Type RESULT =null;
                int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
                Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
                int numberOfElementsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int numberOfElementsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                String numberOfElements = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                Logger.log.println("type ::= type T_ARRAY (row " + (tleft+1) + ")");
                RESULT = t.addDimension(new Integer(numberOfElements));

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // type ::= T_BOOL
            {
                Type RESULT =null;
                int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("type ::= T_BOOL (row " + (tleft+1) + ")");
                RESULT = Type.TBool;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // type ::= T_INT
            {
                Type RESULT =null;
                int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("type ::= T_INT (row " + (tleft+1) + ")");
                RESULT = Type.TInt;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // assignment ::= variable ASSIGN_OP expression
            {
                Instruction RESULT =null;
                int lhsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int lhsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Variable lhs = (Variable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int rhsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int rhsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("assignment ::= variable ASSIGN_OP expression (row " + (lhsleft+1) + ")");
                RESULT = new Assignment(lhs, rhs);
                RESULT.setRowAndCol(lhsleft + 1, lhsright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // declaration ::= type IDENTIFIER ASSIGN_OP expression
            {
                Instruction RESULT =null;
                int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
                Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
                int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int rhsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int rhsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("declaration ::= type IDENTIFIER ASSIGN_OP expression (row " + (tleft+1) + ")");
                RESULT = new Initialization(t, id, rhs);
                RESULT.setRowAndCol(tleft + 1, tright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // declaration ::= type IDENTIFIER
            {
                Instruction RESULT =null;
                int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("declaration ::= type IDENTIFIER (row " + (tleft+1) + ")");
                RESULT = new Declaration(t, id);
                RESULT.setRowAndCol(tleft + 1, tright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // non_if_statement ::= assignment
            {
                Instruction RESULT =null;
                int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("non_if_statement ::= assignment (row " + (aleft+1) + ")");
                RESULT = a;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // non_if_statement ::= declaration
            {
                Instruction RESULT =null;
                int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("non_if_statement ::= declaration (row " + (dleft+1) + ")");
                RESULT = d;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // non_if_statement ::= START_BLOCK statements END_BLOCK
            {
                Instruction RESULT =null;
                int sbleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int sbright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Object sb = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                InstructionList s = (InstructionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                Logger.log.println("non_if_statement ::= START_BLOCK statements END_BLOCK (row " + (sbleft+1) + ")");
                RESULT = s;
                RESULT.setRowAndCol(sbleft + 1, sbright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // then_statement ::= non_if_statement
            {
                Instruction RESULT =null;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("then_statement ::= non_if_statement (row " + (sleft+1) + ")");
                RESULT = s;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // then_statement ::= WHILE expression then_statement
            {
                Instruction RESULT =null;
                int wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Object w = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("then_statement ::= WHILE expression then_statement (row " + (wleft+1) + ")");
                RESULT = new WhileSentence(e, s);
                RESULT.setRowAndCol(wleft + 1, wright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // then_statement ::= IF expression then_statement ELSE then_statement
            {
                Instruction RESULT =null;
                int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
                Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
                int thenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int thenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Instruction then = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int elsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int elsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction els = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("then_statement ::= IF expression then_statement ELSE then_statement (row " + (ileft+1) + ")");
                RESULT = new IfElseSentence(e, then, els);
                RESULT.setRowAndCol(ileft + 1, iright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // statement ::= non_if_statement
            {
                Instruction RESULT =null;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statement ::= non_if_statement (row " + (sleft+1) + ")");
                RESULT = s;

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // statement ::= WHILE expression statement
            {
                Instruction RESULT =null;
                int wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Object w = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statement ::= WHILE expression statement (row " + (wleft+1) + ")");
                RESULT = new WhileSentence(e, s);
                RESULT.setRowAndCol(wleft + 1, wright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // statement ::= IF expression then_statement ELSE statement
            {
                Instruction RESULT =null;
                int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
                Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
                int thenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int thenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Instruction then = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int elsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int elsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction els = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statement ::= IF expression then_statement ELSE statement (row " + (ileft+1) + ")");
                RESULT = new IfElseSentence(e, then, els);
                RESULT.setRowAndCol(ileft + 1, iright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // statement ::= IF expression statement
            {
                Instruction RESULT =null;
                int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
                int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
                Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
                int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statement ::= IF expression statement (row " + (ileft+1) + ")");
                RESULT = new IfSentence(e, s);
                RESULT.setRowAndCol(ileft + 1, iright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // statements ::= statement statements
            {
                InstructionList RESULT =null;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                int ssleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int ssright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                InstructionList ss = (InstructionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statements ::= statement statements (row " + (sleft+1) + ")");
                RESULT = new InstructionList(s, ss);
                RESULT.setRowAndCol(sleft + 1, sright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // statements ::= statement
            {
                InstructionList RESULT =null;
                int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
                Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                Logger.log.println("statements ::= statement (row " + (sleft+1) + ")");
                RESULT = new InstructionList(s);
                RESULT.setRowAndCol(sleft + 1, sright + 1);

                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            return CUP$AnalizadorSintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= statements EOF
            {
                Object RESULT =null;
                int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
                int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
                InstructionList start_val = (InstructionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
                RESULT = start_val;
                CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$AnalizadorSintactico$parser.done_parsing();
            return CUP$AnalizadorSintactico$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                "Invalid action number found in internal parse table");

        }
    }
}

