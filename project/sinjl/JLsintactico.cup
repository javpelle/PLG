package sinjl;

import java_cup.runtime.*;
import FileReader;




parser code {: 


	//Reportar error encontrado
	
	public void report_error(String message, Object info) {
		StrubgBuilder n = new StringBuilder("Error");
		if (info instanceof hava_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0) 
					m.append(", column "+(s.right + 1));
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
	
	//Error fatal, se finaliza la ejecucion
	public void report_fatal_error(String message, Object info) {
		report_error(message, infor);
		System.exit(1);
	}
	
	public static void aSintactico(String file){
		try{
			AnalizadorSintactico asin = new AnalizadorSintactico(
				new AnalizadorLexico (new FileReader(file)));
  
:};



terminal     EQ, LT, NOT, EQEQ, LTEQ, NOTEQ, ANDAND, OROR, PLUS, MINUS, MULT, DIV,
             LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT,
			 BOOL, CONST, ELSE, INT, IF, RETURN, VOID, WHILE, FUNCTION, START, DECVAR;

terminal String	IDENTIFIER;
terminal Integer INTEGER_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
			 

non terminal  S, Ds, LDs, D, E0, E1, E2, OP0, OP1;

S   ::= EVALUA E0 Ds ;
Ds  ::= DONDE LDs | ;
LDs ::= LDs COMA D | D ;
D   ::= IDEN IGUAL E0 ;
E0  ::= E0 OP0 E1  | E1 ;
E1  ::= E1 OP1 E2  | E2 ;
E2  ::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;  
OP0 ::= MAS  | MENOS ;
OP1 ::= POR | DIV ;